/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/particles.ts/lib/particle.js":
/*!***************************************************!*\
  !*** ./node_modules/particles.ts/lib/particle.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.__esModule = true;\n// import { Conf } from './utils/interfaces';\nvar utils_1 = __webpack_require__(/*! ./utils/utils */ \"./node_modules/particles.ts/lib/utils/utils.js\");\nvar Particle = /** @class */ (function () {\n    function Particle(opacity, particles, color, position) {\n        if (position === void 0) { position = null; }\n        var _this = this;\n        this.opacity = opacity;\n        this.particles = particles;\n        this.position = position;\n        // public particles : Particles;\n        this.color = { value: null, rgb: null, hsl: null };\n        this.checkOverlap = function (position) {\n            if (position === void 0) { position = null; }\n            for (var i = 0; i < _this.particles.settings.particles.array.length; i++) {\n                var p2 = _this.particles.settings.particles.array[i];\n                var dx = _this.x - p2.x, dy = _this.y - p2.y;\n                var dist = Math.sqrt(dx * dx + dy * dy);\n                if (dist <= _this.radius + p2.radius) {\n                    _this.x = position != null\n                        ? position.x\n                        : utils_1.randomFloat() * _this.particles.canvasWidth;\n                    _this.y = position != null\n                        ? position.y\n                        : utils_1.randomFloat() * _this.particles.canvasHeight;\n                    _this.checkOverlap();\n                }\n            }\n        };\n        this.drawPolygon = function (c, startX, startY, sideLength, sideCountNumerator, sideCountDenominator) {\n            var sideCount = sideCountNumerator * sideCountDenominator;\n            var decimalSides = sideCountNumerator / sideCountDenominator;\n            var interiorAngleDegrees = (180 * (decimalSides - 2)) / decimalSides;\n            var interiorAngle = Math.PI - Math.PI * interiorAngleDegrees / 180; // convert to radians\n            c.save();\n            c.beginPath();\n            c.translate(startX, startY);\n            c.moveTo(0, 0);\n            for (var i = 0; i < sideCount; i++) {\n                c.lineTo(sideLength, 0);\n                c.translate(sideLength, 0);\n                c.rotate(interiorAngle);\n            }\n            //c.stroke();\n            c.restore();\n        };\n        this.drawShape = function (shape, radius, stroke) {\n            // console.log(shape);\n            if (stroke === void 0) { stroke = false; }\n            switch (shape) {\n                case 'circle':\n                    _this.particles.ctx.arc(_this.x, _this.y, radius, 0, Math.PI * 2, false);\n                    break;\n                case 'edge':\n                case 'square':\n                    _this.particles.ctx.rect(_this.x - radius, _this.y - radius, radius * 2, radius * 2);\n                    break;\n                case 'triangle':\n                    _this.drawPolygon(_this.particles.ctx, _this.x - radius, _this.y + radius / 1.66, radius * 2, 3, 2);\n                    break;\n                case 'polygon':\n                    _this.drawPolygon(_this.particles.ctx, _this.x - radius /\n                        (_this.particles.settings.particles.shape.polygon.nb_sides / 3.5), // startX\n                    _this.y - radius / (2.66 / 3.5), // startY\n                    radius * 2.66 /\n                        (_this.particles.settings.particles.shape.polygon.nb_sides / 3), // sideLength\n                    _this.particles.settings.particles.shape.polygon.nb_sides, // sideCountNumerator\n                    1 // sideCountDenominator\n                    );\n                    break;\n                case 'star':\n                    _this.drawPolygon(_this.particles.ctx, _this.x - radius * 2 /\n                        (_this.particles.settings.particles.shape.polygon.nb_sides / 4), // startX\n                    _this.y - radius / (2 * 2.66 / 3.5), // startY\n                    radius * 2 * 2.66 /\n                        (_this.particles.settings.particles.shape.polygon.nb_sides / 3), // sideLength\n                    _this.particles.settings.particles.shape.polygon.nb_sides, // sideCountNumerator\n                    2 // sideCountDenominator\n                    );\n                    break;\n                case 'char':\n                case 'character':\n                    _this.particles.ctx.font = _this.particles.settings.particles.shape.character.style + \" \" + _this.particles.settings.particles.shape.character.weight + \" \" + Math.round(radius) * 2 + \"px \" + _this.particles.settings.particles.shape.character.font;\n                    if (stroke) {\n                        _this.particles.ctx.strokeText(_this.character, _this.x - radius / 2, _this.y + radius / 2);\n                    }\n                    else {\n                        _this.particles.ctx.fillText(_this.character, _this.x - radius / 2, _this.y + radius / 2);\n                    }\n                    break;\n                case 'image':\n                    var draw = function (img_obj) {\n                        _this.particles.ctx.drawImage(img_obj, _this.x - radius, _this.y - radius, radius * 2, radius * 2 / _this.img.ratio);\n                    };\n                    var img_obj;\n                    if (_this.particles.settings.tmp.img_type == 'svg') {\n                        img_obj = _this.img.obj;\n                    }\n                    else {\n                        img_obj = _this.particles.settings.tmp.img_obj;\n                    }\n                    if (img_obj != null) {\n                        draw(img_obj);\n                    }\n                    break;\n            }\n        };\n        this.createSvgImg = function () {\n            /* set color to svg element */\n            var svgXml = _this.particles.settings.tmp.source_svg;\n            var coloredSvgXml = svgXml.replace(/#([0-9A-F]{3,6})/gi, function (m) {\n                var color_value;\n                if (_this.color.rgb) {\n                    color_value = \"rgba(\" + _this.color.rgb.r + \",\" + _this.color.rgb.g + \",\" + _this.color.rgb.b + \",\" + _this.opacity + \")\";\n                }\n                else {\n                    color_value = \"hsla(\" + _this.color.hsl.h + \",\" + _this.color.hsl.s + \"%,\" + _this.color.hsl.l + \"%,\" + _this.opacity + \")\";\n                }\n                return color_value;\n            });\n            /* prepare to create img with colored svg */\n            var svg = new Blob([coloredSvgXml], { type: 'image/svg+xml;charset=utf-8' });\n            var url = URL.createObjectURL(svg);\n            /* create particle img obj */\n            var img = new Image();\n            img.addEventListener('load', function (e) {\n                _this.img.obj = img;\n                _this.img.loaded = true;\n                URL.revokeObjectURL(url);\n                _this.particles.settings.tmp.count_svg++;\n            });\n            img.src = url;\n        };\n        this.draw = function () {\n            var radius, opacity;\n            var colorValue;\n            if (_this.radius_bubble != null) {\n                radius = _this.radius_bubble;\n            }\n            else {\n                radius = _this.radius;\n            }\n            if (_this.opacity_bubble != null) {\n                opacity = _this.opacity_bubble;\n            }\n            else {\n                opacity = _this.opacity;\n            }\n            if (_this.color.rgb != null) {\n                colorValue = \"rgba(\" + _this.color.rgb.r + \",\" + _this.color.rgb.g + \",\" + _this.color.rgb.b + \",\" + opacity + \")\";\n            }\n            else {\n                colorValue = \"hsla(\" + _this.color.hsl.h + \",\" + _this.color.hsl.s + \"%,\" + _this.color.hsl.l + \"%,\" + opacity + \")\";\n            }\n            _this.particles.ctx.fillStyle = colorValue;\n            _this.particles.ctx.beginPath();\n            _this.drawShape(_this.shape, radius);\n            _this.particles.ctx.closePath();\n            if (_this.particles.settings.particles.shape.stroke.width > 0) {\n                _this.particles.ctx.strokeStyle = _this.particles.settings.particles.shape.stroke.color;\n                _this.particles.ctx.lineWidth = _this.particles.settings.particles.shape.stroke.width;\n                _this.particles.ctx.stroke();\n            }\n            _this.particles.ctx.fill();\n        };\n        this.radius = (this.particles.settings.particles.size.random\n            ? utils_1.randomFloat()\n            : 1) * this.particles.settings.particles.size.value;\n        if (this.particles.settings.particles.size.anim.enable) {\n            this.sizeStatus = false;\n            this.vs = this.particles.settings.particles.size.anim.speed / 100;\n            if (!this.particles.settings.particles.size.anim.sync) {\n                this.vs = this.vs * utils_1.randomFloat();\n            }\n        }\n        this.x = this.position != null\n            ? this.position.x\n            : utils_1.randomFloat() * this.particles.canvasWidth;\n        this.y = this.position != null\n            ? this.position.y\n            : utils_1.randomFloat() * this.particles.canvasHeight;\n        if (this.x > this.particles.canvasWidth - this.radius * 2)\n            this.x = this.x - this.radius;\n        else if (this.x < this.radius * 2)\n            this.x = this.x + this.radius;\n        if (this.y > this.particles.canvasHeight - this.radius * 2)\n            this.y = this.y - this.radius;\n        else if (this.y < this.radius * 2)\n            this.y = this.y + this.radius;\n        /* check position - avoid overlap */\n        if (this.particles.settings.particles.move.bounce) {\n            this.checkOverlap(this.position);\n        }\n        if (Array.isArray(color)) {\n            var color_selected = color[Math.floor(utils_1.randomFloat() * this.particles.settings.particles.color.value.length)];\n            this.color.rgb = utils_1.hexToRgb(color_selected);\n        }\n        else if (color == 'random') {\n            this.color.rgb = {\n                'r': Math.floor((utils_1.randomFloat() * (255 - 0 + 1)) + 0),\n                'g': Math.floor((utils_1.randomFloat() * (255 - 0 + 1)) + 0),\n                'b': Math.floor((utils_1.randomFloat() * (255 - 0 + 1)) + 0)\n            };\n        }\n        else {\n            this.color.value = color;\n            this.color.rgb = utils_1.hexToRgb(color);\n        }\n        this.opacity = (this.particles.settings.particles.opacity.random\n            ? utils_1.randomFloat()\n            : 1) *\n            this.particles.settings.particles.opacity.value;\n        if (this.particles.settings.particles.opacity.anim.enable) {\n            this.opacityStatus = false;\n            this.vo = this.particles.settings.particles.opacity.anim.speed / 100;\n            if (!this.particles.settings.particles.opacity.anim.sync) {\n                this.vo = this.vo * utils_1.randomFloat();\n            }\n        }\n        var velbase;\n        switch (this.particles.settings.particles.move.direction) {\n            case 'top':\n                velbase = { 'x': 0, 'y': -1 };\n                break;\n            case 'top-right':\n                velbase = { 'x': 0.5, 'y': -0.5 };\n                break;\n            case 'right':\n                velbase = { 'x': 1, 'y': -0 };\n                break;\n            case 'bottom-right':\n                velbase = { 'x': 0.5, 'y': 0.5 };\n                break;\n            case 'bottom':\n                velbase = { 'x': 0, 'y': 1 };\n                break;\n            case 'bottom-left':\n                velbase = { 'x': -0.5, 'y': 1 };\n                break;\n            case 'left':\n                velbase = { 'x': -1, 'y': 0 };\n                break;\n            case 'top-left':\n                velbase = { 'x': -0.5, 'y': -0.5 };\n                break;\n            default:\n                velbase = { 'x': 0, 'y': 0 };\n                break;\n        }\n        if (this.particles.settings.particles.move.straight) {\n            this.vx = velbase.x;\n            this.vy = velbase.y;\n            if (this.particles.settings.particles.move.parallax) {\n                this.vx = velbase.x * this.radius;\n                this.vy = velbase.y * this.radius;\n            }\n            else if (this.particles.settings.particles.move.random) {\n                this.vx = this.vx * (utils_1.randomFloat());\n                this.vy = this.vy * (utils_1.randomFloat());\n            }\n        }\n        else {\n            if (this.particles.settings.particles.move.parallax) {\n                this.vx = (velbase.x + utils_1.randomInt(2) - 0.5) * this.radius;\n                this.vy = (velbase.y + utils_1.randomInt(2) - 0.5) * this.radius;\n            }\n            else {\n                this.vx = velbase.x + utils_1.randomFloat() - 0.5;\n                this.vy = velbase.y + utils_1.randomFloat() - 0.5;\n            }\n        }\n        // var theta = 2.0 * Math.PI * randomFloat();\n        // this.vx = Math.cos(theta);\n        // this.vy = Math.sin(theta);\n        this.vxI = this.vx;\n        this.vyI = this.vy;\n        var shape_type = this.particles.settings.particles.shape.type;\n        if (typeof shape_type === 'string') {\n            this.shape = shape_type.toString();\n        }\n        else {\n            if (Array.isArray(shape_type)) {\n                this.shape = shape_type[Math.floor(utils_1.randomFloat() * shape_type.length)];\n            }\n        }\n        if (this.shape == 'image') {\n            var sh = this.particles.settings.particles.shape;\n            this.img = {\n                src: sh.image.src,\n                ratio: sh.image.width / sh.image.height,\n                loaded: null,\n                obj: null\n            };\n            if (this.img.ratio == 0)\n                this.img.ratio = 1;\n            if (this.particles.settings.particles.tmp.img_type == 'svg' &&\n                this.particles.settings.particles.tmp.source_svg != null) {\n                this.createSvgImg();\n                if (this.particles.settings.particles.tmp.pushing) {\n                    this.img.loaded = false;\n                }\n            }\n        }\n        else if (this.shape == 'char' || this.shape == 'character') {\n            if (typeof this.particles.settings.particles.shape.character.value === 'string') {\n                this.character = this.particles.settings.particles.shape.character.value;\n            }\n            else {\n                if (Array.isArray(this.particles.settings.particles.shape.character.value)) {\n                    this.character = this.particles.settings.particles.shape.character.value[Math.floor(utils_1.randomFloat() *\n                        this.particles.settings.particles.shape.character.value.length)];\n                }\n            }\n        }\n    }\n    return Particle;\n}());\nexports.Particle = Particle;\n\n\n//# sourceURL=webpack://personal-website/./node_modules/particles.ts/lib/particle.js?");

/***/ }),

/***/ "./node_modules/particles.ts/lib/particles.js":
/*!****************************************************!*\
  !*** ./node_modules/particles.ts/lib/particles.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.__esModule = true;\nvar utils_1 = __webpack_require__(/*! ./utils/utils */ \"./node_modules/particles.ts/lib/utils/utils.js\");\nvar defaults_1 = __webpack_require__(/*! ./utils/defaults */ \"./node_modules/particles.ts/lib/utils/defaults.js\");\nvar particle_1 = __webpack_require__(/*! ./particle */ \"./node_modules/particles.ts/lib/particle.js\");\nvar Particles = /** @class */ (function () {\n    function Particles(id, config) {\n        if (id === void 0) { id = 'particles'; }\n        if (config === void 0) { config = null; }\n        var _this = this;\n        this.id = id;\n        this.config = config;\n        this.settings = defaults_1.defaultConf;\n        this.start = function () {\n            _this.createCanvas();\n            if (_this.config) {\n                _this.settings = utils_1.deepExtend(_this.settings, _this.config);\n            }\n            _this.eventsListeners();\n            _this.begin();\n            return _this;\n        };\n        this.retinaInit = function () {\n            if (_this.settings.retina_detect && window.devicePixelRatio > 1) {\n                _this.pxratio = window.devicePixelRatio;\n                _this.settings.tmp.retina = true;\n            }\n            else {\n                _this.pxratio = 1;\n                _this.settings.tmp.retina = false;\n            }\n            _this.canvasWidth = _this.canvas.offsetWidth * _this.pxratio;\n            _this.canvasHeight = _this.canvas.offsetHeight * _this.pxratio;\n            _this.settings.particles.size.value = _this.settings.tmp.obj.size_value * _this.pxratio;\n            _this.settings.particles.size.anim.speed = _this.settings.tmp.obj.size_anim_speed * _this.pxratio;\n            _this.settings.particles.move.speed = _this.settings.tmp.obj.move_speed * _this.pxratio;\n            _this.settings.particles.line_linked.distance = _this.settings.tmp.obj.line_linked_distance * _this.pxratio;\n            _this.settings.interactivity.modes.grab.distance = _this.settings.tmp.obj.mode_grab_distance * _this.pxratio;\n            _this.settings.interactivity.modes.bubble.distance = _this.settings.tmp.obj.mode_bubble_distance * _this.pxratio;\n            _this.settings.particles.line_linked.width = _this.settings.tmp.obj.line_linked_width * _this.pxratio;\n            _this.settings.interactivity.modes.bubble.size = _this.settings.tmp.obj.mode_bubble_size * _this.pxratio;\n            _this.settings.interactivity.modes.repulse.distance = _this.settings.tmp.obj.mode_repulse_distance * _this.pxratio;\n        };\n        /* ---------- Particles functions - canvas ------------ */\n        this.createCanvas = function () {\n            if (_this.id == null) {\n                _this.id = 'particles';\n            }\n            var tag = document.getElementById(_this.id);\n            var canvasClass = 'particles-ts-canvas-el';\n            var existCanvas = tag.getElementsByClassName(canvasClass);\n            if (existCanvas.length > 0) {\n                while (existCanvas.length > 0) {\n                    existCanvas[0].remove();\n                }\n            }\n            var canvasEl = document.createElement('canvas');\n            canvasEl.className = canvasClass;\n            canvasEl.style.width = \"100%\";\n            canvasEl.style.height = \"100%\";\n            _this.canvas = tag.appendChild(canvasEl);\n            _this.canvas = document.querySelector(\"#\" + _this.id + \" > .particles-ts-canvas-el\");\n            _this.ctx = _this.canvas.getContext('2d');\n        };\n        this.canvasSize = function () {\n            _this.canvas.width = _this.canvasWidth;\n            _this.canvas.height = _this.canvasHeight;\n            if (_this.settings != null && _this.settings.interactivity.events.resize) {\n                window.addEventListener('resize', function (_) {\n                    _this.canvasWidth = _this.canvas.offsetWidth;\n                    _this.canvasHeight = _this.canvas.offsetHeight;\n                    if ('retina' in _this.settings.tmp && _this.settings.tmp.retina) {\n                        _this.canvasWidth *= _this.pxratio;\n                        _this.canvasHeight *= _this.pxratio;\n                    }\n                    _this.canvas.width = _this.canvasWidth;\n                    _this.canvas.height = _this.canvasHeight;\n                    if (!_this.settings.particles.move.enable) {\n                        _this.particlesEmpty();\n                        _this.particlesCreate();\n                        _this.particlesDraw();\n                        _this.densityAutoParticles();\n                    }\n                    _this.densityAutoParticles();\n                });\n            }\n        };\n        this.canvasPaint = function () {\n            _this.ctx.fillRect(0, 0, _this.canvasWidth, _this.canvasHeight);\n        };\n        this.canvasClear = function () {\n            _this.ctx.clearRect(0, 0, _this.canvasWidth, _this.canvasHeight);\n        };\n        this.particlesCreate = function () {\n            for (var i = 0; i < _this.settings.particles.number.value; i++) {\n                _this.settings.particles.array.push(new particle_1.Particle(_this.settings.particles.opacity.value, _this, _this.settings.particles.color.value));\n            }\n            _this.settings.particles.array.sort(function (a, b) { return a.radius > b.radius ? 1 : -1; });\n        };\n        this.particlesUpdate = function () {\n            for (var i = 0; i < _this.settings.particles.array.length; i++) {\n                var p = _this.settings.particles.array[i];\n                if (_this.settings.particles.move.enable) {\n                    var ms = _this.settings.particles.move.speed / 2;\n                    p.x += p.vx * ms;\n                    p.y += p.vy * ms;\n                }\n                if (_this.settings.particles.opacity.anim.enable) {\n                    if (p.opacityStatus == true) {\n                        if (p.opacity >= _this.settings.particles.opacity.value) {\n                            p.opacityStatus = false;\n                        }\n                        p.opacity += p.vo;\n                    }\n                    else {\n                        if (p.opacity <= _this.settings.particles.opacity.anim.opacity_min) {\n                            p.opacityStatus = true;\n                        }\n                        p.opacity -= p.vo;\n                    }\n                    if (p.opacity < 0)\n                        p.opacity = 0;\n                }\n                if (_this.settings.particles.size.anim.enable) {\n                    if (p.sizeStatus == true) {\n                        if (p.radius >= _this.settings.particles.size.value) {\n                            p.sizeStatus = false;\n                        }\n                        p.radius += p.vs;\n                    }\n                    else {\n                        if (p.radius <= _this.settings.particles.size.anim.size_min) {\n                            p.sizeStatus = true;\n                        }\n                        p.radius -= p.vs;\n                    }\n                    if (p.radius < 0)\n                        p.radius = 0;\n                }\n                var new_pos = void 0;\n                if (_this.settings.particles.move.out_mode == 'bounce') {\n                    new_pos = {\n                        x_left: p.radius,\n                        x_right: _this.canvasWidth,\n                        y_top: p.radius,\n                        y_bottom: _this.canvasHeight\n                    };\n                }\n                else {\n                    new_pos = {\n                        x_left: -p.radius,\n                        x_right: _this.canvasWidth + p.radius,\n                        y_top: -p.radius,\n                        y_bottom: _this.canvasHeight + p.radius\n                    };\n                }\n                if (p.x - p.radius > _this.canvasWidth) {\n                    p.x = new_pos.x_left;\n                    p.y = utils_1.randomFloat() * _this.canvasHeight;\n                }\n                else if (p.x + p.radius < 0) {\n                    p.x = new_pos.x_right;\n                    p.y = utils_1.randomFloat() * _this.canvasHeight;\n                }\n                if (p.y - p.radius > _this.canvasHeight) {\n                    p.y = new_pos.y_top;\n                    p.x = utils_1.randomFloat() * _this.canvasWidth;\n                }\n                else if (p.y + p.radius < 0) {\n                    p.y = new_pos.y_bottom;\n                    p.x = utils_1.randomFloat() * _this.canvasWidth;\n                }\n                /* out of canvas modes */\n                switch (_this.settings.particles.move.out_mode) {\n                    case 'bounce':\n                        if (p.x + p.radius > _this.canvasWidth) {\n                            p.vx = -p.vx;\n                        }\n                        else if (p.x - p.radius < 0) {\n                            p.vx = -p.vx;\n                        }\n                        if (p.y + p.radius > _this.canvasHeight) {\n                            p.vy = -p.vy;\n                        }\n                        else if (p.y - p.radius < 0) {\n                            p.vy = -p.vy;\n                        }\n                        break;\n                }\n                if (utils_1.isInArray('grab', _this.settings.interactivity.events.onhover.mode)) {\n                    _this.grabParticle(p);\n                }\n                if (utils_1.isInArray('bubble', _this.settings.interactivity.events.onhover.mode) || utils_1.isInArray('bubble', _this.settings.interactivity.events.onclick.mode)) {\n                    _this.bubbleParticle(p);\n                }\n                if (utils_1.isInArray('repulse', _this.settings.interactivity.events.onhover.mode) || utils_1.isInArray('repulse', _this.settings.interactivity.events.onclick.mode)) {\n                    _this.repulseParticle(p);\n                }\n                if (_this.settings.particles.line_linked.enable ||\n                    _this.settings.particles.move.attract.enable ||\n                    _this.settings.particles.move.bounce) {\n                    for (var j = i + 1; j < _this.settings.particles.array.length; j++) {\n                        var p2 = _this.settings.particles.array[j];\n                        if (_this.settings.particles.line_linked.enable) {\n                            _this.linkParticles(p, p2);\n                        }\n                        if (_this.settings.particles.move.attract.enable) {\n                            _this.attractParticles(p, p2);\n                        }\n                        if (_this.settings.particles.move.bounce) {\n                            _this.bounceParticles(p, p2);\n                        }\n                    }\n                }\n            }\n        };\n        this.particlesDraw = function () {\n            _this.ctx.clearRect(0, 0, _this.canvasWidth, _this.canvasHeight);\n            _this.particlesUpdate();\n            for (var i = 0; i < _this.settings.particles.array.length; i++) {\n                var p = _this.settings.particles.array[i];\n                p.draw();\n            }\n        };\n        this.particlesEmpty = function () {\n            _this.settings.particles.array = [];\n        };\n        this.particlesRefresh = function (config) {\n            if (config === void 0) { config = null; }\n            window.cancelAnimationFrame(_this.settings.tmp.checkAnimFrame);\n            window.cancelAnimationFrame(_this.drawAnimFrame);\n            _this.settings.tmp.source_svg = null;\n            _this.settings.tmp.img_obj = null;\n            _this.settings.tmp.count_svg = 0;\n            _this.particlesEmpty();\n            _this.canvasClear();\n            if (config) {\n                _this.settings = utils_1.deepExtend(_this.settings, config);\n            }\n            /* restart */\n            _this.begin();\n        };\n        this.linkParticles = function (p1, p2) {\n            var dx = p1.x - p2.x, dy = p1.y - p2.y;\n            var dist = Math.sqrt(dx * dx + dy * dy);\n            if (dist <= _this.settings.particles.line_linked.distance) {\n                var opacity_line = _this.settings.particles.line_linked.opacity -\n                    (dist / (1 / _this.settings.particles.line_linked.opacity)) /\n                        _this.settings.particles.line_linked.distance;\n                if (opacity_line > 0) {\n                    var color_line = _this.settings.particles.line_linked.color_rgb_line;\n                    _this.ctx.strokeStyle = \"rgba(\" + color_line.r + \",\" + color_line.g + \",\" + color_line.b + \",\" + opacity_line + \")\";\n                    _this.ctx.lineWidth = _this.settings.particles.line_linked.width;\n                    /* path */\n                    _this.ctx.beginPath();\n                    _this.ctx.moveTo(p1.x, p1.y);\n                    _this.ctx.lineTo(p2.x, p2.y);\n                    _this.ctx.stroke();\n                    _this.ctx.closePath();\n                }\n            }\n        };\n        this.attractParticles = function (p1, p2) {\n            var dx = p1.x - p2.x, dy = p1.y - p2.y;\n            var dist = Math.sqrt(dx * dx + dy * dy);\n            if (dist <= _this.settings.particles.line_linked.distance) {\n                var ax = dx / (_this.settings.particles.move.attract.rotateX * 1000), ay = dy / (_this.settings.particles.move.attract.rotateY * 1000);\n                p1.vx -= ax;\n                p1.vy -= ay;\n                p2.vx += ax;\n                p2.vy += ay;\n            }\n        };\n        this.bounceParticles = function (p1, p2) {\n            var dx = p1.x - p2.x, dy = p1.y - p2.y, dist_p = p1.radius + p2.radius;\n            var dist = Math.sqrt(dx * dx + dy * dy);\n            if (dist <= dist_p) {\n                p1.vx = -p1.vx;\n                p1.vy = -p1.vy;\n                p2.vx = -p2.vx;\n                p2.vy = -p2.vy;\n            }\n        };\n        /// Adds a specified amount of particles\n        this.pushParticles = function (nb, pos) {\n            if (pos === void 0) { pos = null; }\n            _this.settings.particles.tmp.pushing = true;\n            for (var i = 0; i < nb; i++) {\n                _this.settings.particles.array.push(new particle_1.Particle(_this.settings.particles.opacity.value, _this, _this.settings.particles.color.value, {\n                    'x': pos != null ? pos.pos_x : utils_1.randomFloat() * _this.canvasWidth,\n                    'y': pos != null ? pos.pos_y : utils_1.randomFloat() * _this.canvasHeight\n                }));\n                if (i == nb - 1) {\n                    if (!_this.settings.particles.move.enable) {\n                        _this.particlesDraw();\n                    }\n                    _this.settings.particles.tmp.pushing = false;\n                }\n            }\n            _this.settings.particles.array.sort(function (a, b) { return a.radius > b.radius ? 1 : -1; });\n        };\n        /* ---------- Particles functions - modes events ------------ */\n        this.removeParticles = function (nb) {\n            _this.settings.particles.array.splice(0, nb);\n            if (!_this.settings.particles.move.enable) {\n                _this.particlesDraw();\n            }\n        };\n        this.bubbleParticle = function (p) {\n            var dist_mouse, time_spent, value;\n            if (_this.settings.interactivity.events.onhover.enable &&\n                utils_1.isInArray('bubble', _this.settings.interactivity.events.onhover.mode) &&\n                _this.settings.interactivity.status == 'mousemove') {\n                var dx_mouse_1 = p.x - _this.settings.interactivity.mouse.pos_x, dy_mouse_1 = p.y - _this.settings.interactivity.mouse.pos_y;\n                dist_mouse = Math.sqrt(dx_mouse_1 * dx_mouse_1 + dy_mouse_1 * dy_mouse_1);\n                var ratio = 1 -\n                    dist_mouse / _this.settings.interactivity.modes.bubble.distance;\n                var init = function () {\n                    p.opacity_bubble = p.opacity;\n                    p.radius_bubble = p.radius;\n                };\n                if (dist_mouse <= _this.settings.interactivity.modes.bubble.distance) {\n                    if (ratio >= 0 && _this.settings.interactivity.status == 'mousemove') {\n                        if (_this.settings.interactivity.modes.bubble.size != _this.settings.particles.size.value) {\n                            if (_this.settings.interactivity.modes.bubble.size > _this.settings.particles.size.value) {\n                                var size = p.radius + (_this.settings.interactivity.modes.bubble.size * ratio);\n                                if (size >= 0) {\n                                    p.radius_bubble = size;\n                                }\n                            }\n                            else {\n                                var dif = p.radius - _this.settings.interactivity.modes.bubble.size, size = p.radius - (dif * ratio);\n                                if (size > 0) {\n                                    p.radius_bubble = size;\n                                }\n                                else {\n                                    p.radius_bubble = 0;\n                                }\n                            }\n                        }\n                        if (_this.settings.interactivity.modes.bubble.opacity != _this.settings.particles.opacity.value) {\n                            if (_this.settings.interactivity.modes.bubble.opacity > _this.settings.particles.opacity.value) {\n                                var opacity = _this.settings.interactivity.modes.bubble.opacity * ratio;\n                                if (opacity > p.opacity &&\n                                    opacity <= _this.settings.interactivity.modes.bubble.opacity) {\n                                    p.opacity_bubble = opacity;\n                                }\n                            }\n                            else {\n                                var opacity = p.opacity - (_this.settings.particles.opacity.value - _this.settings.interactivity.modes.bubble.opacity) * ratio;\n                                if (opacity < p.opacity &&\n                                    opacity >= _this.settings.interactivity.modes.bubble.opacity) {\n                                    p.opacity_bubble = opacity;\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    init();\n                }\n                if (_this.settings.interactivity.status == 'mouseleave') {\n                    init();\n                }\n            }\n            else if (_this.settings.interactivity.events.onclick.enable && utils_1.isInArray('bubble', _this.settings.interactivity.events.onclick.mode)) {\n                if (_this.settings.tmp.bubble_clicking) {\n                    var dx_mouse = p.x - _this.settings.interactivity.mouse.click_pos_x, dy_mouse = p.y - _this.settings.interactivity.mouse.click_pos_y;\n                    dist_mouse = Math.sqrt(dx_mouse * dx_mouse + dy_mouse * dy_mouse);\n                    time_spent = (Date.now() - _this.settings.interactivity.mouse.click_time) / 1000;\n                    if (time_spent > _this.settings.interactivity.modes.bubble.duration) {\n                        _this.settings.tmp.bubble_duration_end = true;\n                    }\n                    if (time_spent > _this.settings.interactivity.modes.bubble.duration * 2) {\n                        _this.settings.tmp.bubble_clicking = false;\n                        _this.settings.tmp.bubble_duration_end = false;\n                    }\n                }\n                var process = function (bubble_param, particles_param, p_obj_bubble, p_obj, id, dist_mouse, time_spent, value) {\n                    if (bubble_param != particles_param) {\n                        if (!_this.settings.tmp.bubble_duration_end) {\n                            if (dist_mouse <= _this.settings.interactivity.modes.bubble.distance) {\n                                var obj = void 0;\n                                if (p_obj_bubble != null) {\n                                    obj = p_obj_bubble;\n                                }\n                                else {\n                                    obj = p_obj;\n                                }\n                                if (obj != bubble_param) {\n                                    var value_1 = p_obj - (time_spent * (p_obj - bubble_param) / _this.settings.interactivity.modes.bubble.duration);\n                                    if (id == 'size')\n                                        p.radius_bubble = value_1;\n                                    if (id == 'opacity')\n                                        p.opacity_bubble = value_1;\n                                }\n                            }\n                            else {\n                                if (id == 'size')\n                                    p.radius_bubble = null;\n                                if (id == 'opacity')\n                                    p.opacity_bubble = null;\n                            }\n                        }\n                        else {\n                            if (p_obj_bubble != null) {\n                                var value_tmp = p_obj - (time_spent * (p_obj - bubble_param) / _this.settings.interactivity.modes.bubble.duration), dif_1 = bubble_param - value_tmp;\n                                value = bubble_param + dif_1;\n                                if (id == 'size')\n                                    p.radius_bubble = value;\n                                if (id == 'opacity')\n                                    p.opacity_bubble = value;\n                            }\n                        }\n                    }\n                };\n                if (_this.settings.tmp.bubble_clicking) {\n                    process(_this.settings.interactivity.modes.bubble.size, _this.settings.particles.size.value, p.radius_bubble, p.radius, 'size', dist_mouse, time_spent, value);\n                    process(_this.settings.interactivity.modes.bubble.opacity, _this.settings.particles.opacity.value, p.opacity_bubble, p.opacity, 'opacity', dist_mouse, time_spent, value);\n                }\n            }\n        };\n        this.repulseParticle = function (p) {\n            if (_this.settings.interactivity.events.onhover.enable &&\n                utils_1.isInArray('repulse', _this.settings.interactivity.events.onhover.mode) &&\n                _this.settings.interactivity.status == 'mousemove') {\n                var dx_mouse = p.x - _this.settings.interactivity.mouse.pos_x, dy_mouse = p.y - _this.settings.interactivity.mouse.pos_y;\n                var dist_mouse = Math.sqrt(dx_mouse * dx_mouse + dy_mouse * dy_mouse);\n                var normVec = {\n                    'x': dx_mouse / dist_mouse,\n                    'y': dy_mouse / dist_mouse\n                };\n                var repulseRadius = _this.settings.interactivity.modes.repulse.distance, velocity = _this.settings.interactivity.modes.repulse.strength, repulseFactor = utils_1.clamp((1 / repulseRadius) * (-1 * Math.pow(dist_mouse / repulseRadius, 2) + 1) * repulseRadius * velocity, 0, 50);\n                var pos = {\n                    'x': p.x + normVec.x * repulseFactor,\n                    'y': p.y + normVec.y * repulseFactor\n                };\n                if (_this.settings.particles.move.out_mode == 'bounce') {\n                    if (pos.x - p.radius > 0 && pos.x + p.radius < _this.canvasWidth)\n                        p.x = pos.x;\n                    if (pos.y - p.radius > 0 && pos.y + p.radius < _this.canvasHeight)\n                        p.y = pos.y;\n                }\n                else {\n                    p.x = pos.x;\n                    p.y = pos.y;\n                }\n            }\n            else if (_this.settings.interactivity.events.onclick.enable &&\n                utils_1.isInArray('repulse', _this.settings.interactivity.events.onclick.mode)) {\n                if (!_this.settings.tmp.repulse_finish != null &&\n                    _this.settings.tmp.repulse_finish) {\n                    _this.settings.tmp.repulse_count++;\n                    if (_this.settings.tmp.repulse_count == _this.settings.particles.array.length) {\n                        _this.settings.tmp.repulse_finish = true;\n                    }\n                }\n                if (_this.settings.tmp.repulse_clicking) {\n                    var repulseRadius_1 = Math.pow(_this.settings.interactivity.modes.repulse.distance / 6, 3);\n                    var dx_1 = _this.settings.interactivity.mouse.click_pos_x - p.x;\n                    var dy_1 = _this.settings.interactivity.mouse.click_pos_y - p.y;\n                    var d = dx_1 * dx_1 + dy_1 * dy_1;\n                    var force_1 = -repulseRadius_1 / d * 1;\n                    var process = function () {\n                        var f = Math.atan2(dy_1, dx_1);\n                        p.vx = force_1 * Math.cos(f);\n                        p.vy = force_1 * Math.sin(f);\n                        if (_this.settings.particles.move.out_mode == 'bounce') {\n                            var pos = { 'x': p.x + p.vx, 'y': p.y + p.vy };\n                            if (pos.x + p.radius > _this.canvasWidth) {\n                                p.vx = -p.vx;\n                            }\n                            else if (pos.x - p.radius < 0)\n                                p.vx = -p.vx;\n                            if (pos.y + p.radius > _this.canvasHeight) {\n                                p.vy = -p.vy;\n                            }\n                            else if (pos.y - p.radius < 0) {\n                                p.vy = -p.vy;\n                            }\n                        }\n                    };\n                    if (d <= repulseRadius_1) {\n                        process();\n                    }\n                }\n                else {\n                    if (_this.settings.tmp.repulse_clicking == false) {\n                        p.vx = p.vxI;\n                        p.vy = p.vyI;\n                    }\n                }\n            }\n        };\n        this.grabParticle = function (p) {\n            if (_this.settings.interactivity.events.onhover.enable &&\n                utils_1.isInArray('grab', _this.settings.interactivity.events.onhover.mode) &&\n                _this.settings.interactivity.status == 'mousemove') {\n                var dx_mouse = p.x - _this.settings.interactivity.mouse.pos_x, dy_mouse = p.y - _this.settings.interactivity.mouse.pos_y, dist_mouse = Math.sqrt(dx_mouse * dx_mouse + dy_mouse * dy_mouse);\n                if (dist_mouse <= _this.settings.interactivity.modes.grab.distance) {\n                    var opacity_line = _this.settings.interactivity.modes.grab.line_linked.opacity -\n                        (dist_mouse / (1 / _this.settings.interactivity.modes.grab.line_linked.opacity)) / _this.settings.interactivity.modes.grab.distance;\n                    if (opacity_line > 0) {\n                        var color_line = _this.settings.particles.line_linked.color_rgb_line;\n                        _this.ctx.strokeStyle = \"rgba(\" + color_line.r + \",\" + color_line.g + \",\" + color_line.b + \",\" + opacity_line + \")\";\n                        _this.ctx.lineWidth = _this.settings.particles.line_linked.width;\n                        /* path */\n                        _this.ctx.beginPath();\n                        _this.ctx.moveTo(p.x, p.y);\n                        _this.ctx.lineTo(_this.settings.interactivity.mouse.pos_x, _this.settings.interactivity.mouse.pos_y);\n                        _this.ctx.stroke();\n                        _this.ctx.closePath();\n                        if (_this.settings.interactivity.modes.grab.outer_shape.enable) {\n                            _this.ctx.beginPath();\n                            var shape = void 0;\n                            if (_this.settings.interactivity.modes.grab.outer_shape.type != 'inherit') {\n                                shape = _this.settings.interactivity.modes.grab.outer_shape.type;\n                            }\n                            else {\n                                shape = p.shape;\n                            }\n                            if (_this.settings.interactivity.modes.grab.outer_shape.stroke.color != 'inherit') {\n                                var color = utils_1.hexToRgb(_this.settings.interactivity.modes.grab.outer_shape.stroke.color);\n                                _this.ctx.strokeStyle = \"rgba(\" + color.r + \",\" + color.g + \",\" + color.b + \",\" + opacity_line + \")\";\n                            }\n                            if (_this.settings.interactivity.modes.grab.outer_shape.stroke.width != 'inherit') {\n                                _this.ctx.lineWidth = _this.settings.interactivity.modes.grab.outer_shape.stroke.width;\n                            }\n                            p.drawShape(shape, _this.settings.interactivity.modes.grab.outer_shape.size + p.radius, true);\n                            _this.ctx.stroke();\n                            _this.ctx.closePath();\n                        }\n                    }\n                }\n            }\n        };\n        this.eventsListeners = function () {\n            if (_this.settings.interactivity.detect_on == 'window') {\n                _this.settings.interactivity.el = window;\n            }\n            else {\n                _this.settings.interactivity.el = _this.canvas;\n            }\n            if (_this.settings.interactivity.events.onhover.enable ||\n                _this.settings.interactivity.events.onclick.enable) {\n                _this.settings.interactivity.el.addEventListener('mousemove', function (e) {\n                    var pos_x = e.clientX, pos_y = e.clientY;\n                    if (_this.settings.interactivity.detect_on == 'window') {\n                        pos_x = e.clientX;\n                        pos_y = e.clientY;\n                    }\n                    else {\n                        pos_x = e.offsetX || e.clientX;\n                        pos_y = e.offsetY || e.clientY;\n                    }\n                    _this.settings.interactivity.mouse.pos_x = pos_x;\n                    _this.settings.interactivity.mouse.pos_y = pos_y;\n                    if (_this.settings.tmp.retina) {\n                        _this.settings.interactivity.mouse.pos_x *= _this.pxratio;\n                        _this.settings.interactivity.mouse.pos_y *= _this.pxratio;\n                    }\n                    _this.settings.interactivity.status = 'mousemove';\n                });\n                _this.settings.interactivity.el.addEventListener('mouseleave', function (e) {\n                    _this.settings.interactivity.mouse.pos_x = null;\n                    _this.settings.interactivity.mouse.pos_y = null;\n                    _this.settings.interactivity.status = 'mouseleave';\n                });\n            }\n            if (_this.settings.interactivity.events.onclick.enable) {\n                _this.settings.interactivity.el.addEventListener('click', function (e) {\n                    _this.settings.interactivity.mouse.click_pos_x = _this.settings.interactivity.mouse.pos_x;\n                    _this.settings.interactivity.mouse.click_pos_y = _this.settings.interactivity.mouse.pos_y;\n                    _this.settings.interactivity.mouse.click_time = Date.now();\n                    if (_this.settings.interactivity.events.onclick.enable) {\n                        if (utils_1.isInArray('push', _this.settings.interactivity.events.onclick.mode)) {\n                            if (_this.settings.particles.move.enable) {\n                                _this.pushParticles(_this.settings.interactivity.modes.push.particles_nb, _this.settings.interactivity.mouse);\n                            }\n                            else {\n                                if (_this.settings.interactivity.modes.push.particles_nb == 1) {\n                                    _this.pushParticles(_this.settings.interactivity.modes.push.particles_nb, _this.settings.interactivity.mouse);\n                                }\n                                else if (_this.settings.interactivity.modes.push.particles_nb > 1) {\n                                    _this.pushParticles(_this.settings.interactivity.modes.push.particles_nb);\n                                }\n                            }\n                        }\n                        if (utils_1.isInArray('remove', _this.settings.interactivity.events.onclick.mode)) {\n                            _this.removeParticles(_this.settings.interactivity.modes.remove.particles_nb);\n                        }\n                        if (utils_1.isInArray('bubble', _this.settings.interactivity.events.onclick.mode)) {\n                            _this.settings.tmp.bubble_clicking = true;\n                        }\n                        if (utils_1.isInArray('repulse', _this.settings.interactivity.events.onclick.mode)) {\n                            _this.settings.tmp.repulse_clicking = true;\n                            _this.settings.tmp.repulse_count = 0;\n                            _this.settings.tmp.repulse_finish = false;\n                            setTimeout(function () {\n                                _this.settings.tmp.repulse_clicking = false;\n                            }, Math.round(_this.settings.interactivity.modes.repulse.duration * 1000));\n                        }\n                    }\n                });\n            }\n        };\n        this.densityAutoParticles = function () {\n            if (_this.settings.particles.number.density.enable) {\n                var area = _this.canvas.width * _this.canvas.height / 1000;\n                if (_this.settings.tmp.retina) {\n                    area = area / (_this.pxratio * 2);\n                }\n                var nb_particles = Math.floor(area * _this.settings.particles.number.value / _this.settings.particles.number.density.value_area);\n                var missing_particles = _this.settings.particles.array.length - nb_particles;\n                if (missing_particles < 0) {\n                    _this.pushParticles(Math.abs(missing_particles));\n                }\n                else {\n                    _this.removeParticles(missing_particles);\n                }\n            }\n        };\n        /// Stops drawing the particles and removes the [canvas]\n        this.destroyParticles = function () {\n            window.cancelAnimationFrame(_this.drawAnimFrame);\n            _this.canvas.remove();\n        };\n        /// Opens the current image displaying in the [canvas] in a new tab\n        this.exportImg = function () {\n            window.open(_this.canvas.toDataURL('image/png'), '_blank');\n        };\n        this.loadImg = function (type) {\n            _this.settings.tmp.img_error = null;\n            if (_this.settings.particles.shape.image.src != '') {\n                if (type == 'svg') {\n                    var req_1 = new XMLHttpRequest;\n                    req_1.open('GET', _this.settings.particles.shape.image.src);\n                    req_1.addEventListener('onreadystatechange', function (data) {\n                        if (req_1.readyState == 4) {\n                            if (req_1.status == 200) {\n                                _this.settings.tmp.source_svg = req_1.response;\n                                _this.checkBeforeDraw();\n                            }\n                            else {\n                                console.log('Error Particles - Image not found');\n                                _this.settings.tmp.img_error = true;\n                            }\n                        }\n                    });\n                    req_1.send();\n                }\n                else {\n                    var img_1 = new Image();\n                    img_1.addEventListener('load', function (e) {\n                        _this.settings.tmp.img_obj = img_1;\n                        _this.checkBeforeDraw();\n                    });\n                    img_1.src = _this.settings.particles.shape.image.src;\n                }\n            }\n            else {\n                console.log('Error Particles - No image.src');\n                _this.settings.tmp.img_error = true;\n            }\n        };\n        /**\n         * A function that will run every frame.\n         * Meant to be replaced with another function\n         */\n        this.everyFrame = function () { };\n        this.draw = function (_) {\n            if (_ === void 0) { _ = null; }\n            if (_this.settings.particles.shape.type == 'image') {\n                if (_this.settings.tmp.img_type == 'svg') {\n                    if (_this.settings.tmp.count_svg >=\n                        _this.settings.particles.number.value) {\n                        _this.particlesDraw();\n                        if (!_this.settings.particles.move.enable) {\n                            window.cancelAnimationFrame(_this.drawAnimFrame);\n                        }\n                        else {\n                            _this.drawAnimFrame = window.requestAnimationFrame(_this.draw);\n                        }\n                    }\n                    else {\n                        if (!_this.settings.tmp.img_error) {\n                            _this.drawAnimFrame = window.requestAnimationFrame(_this.draw);\n                        }\n                    }\n                }\n                else {\n                    if (_this.settings.tmp.img_obj != null) {\n                        _this.particlesDraw();\n                        if (!_this.settings.particles.move.enable) {\n                            window.cancelAnimationFrame(_this.drawAnimFrame);\n                        }\n                        else {\n                            _this.drawAnimFrame = window.requestAnimationFrame(_this.draw);\n                        }\n                    }\n                    else {\n                        if (!_this.settings.tmp.img_error) {\n                            _this.drawAnimFrame = window.requestAnimationFrame(_this.draw);\n                        }\n                    }\n                }\n            }\n            else {\n                _this.particlesDraw();\n                if (!_this.settings.particles.move.enable) {\n                    window.cancelAnimationFrame(_this.drawAnimFrame);\n                }\n                else {\n                    _this.drawAnimFrame = window.requestAnimationFrame(_this.draw);\n                }\n            }\n            _this.everyFrame();\n        };\n        this.checkBeforeDraw = function () {\n            if (_this.settings.particles.shape.type == 'image') {\n                if (_this.settings.tmp.img_type == 'svg' &&\n                    _this.settings.tmp.source_svg == null) {\n                    _this.settings.tmp.checkAnimFrame = window.requestAnimationFrame(_this.settings.tmp.checkAnimFrame);\n                }\n                else {\n                    window.cancelAnimationFrame(_this.settings.tmp.checkAnimFrame);\n                    if (!_this.settings.tmp.img_error) {\n                        _this.init();\n                        _this.draw();\n                    }\n                }\n            }\n            else {\n                _this.init();\n                _this.draw();\n            }\n        };\n        this.init = function () {\n            _this.settings.particles.line_linked.color_rgb_line = utils_1.hexToRgb(_this.settings.particles.line_linked.color);\n            _this.settings.tmp.obj = {\n                'size_value': _this.settings.particles.size.value,\n                'size_anim_speed': _this.settings.particles.size.anim.speed,\n                'move_speed': _this.settings.particles.move.speed,\n                'line_linked_distance': _this.settings.particles.line_linked.distance,\n                'line_linked_width': _this.settings.particles.line_linked.width,\n                'mode_grab_distance': _this.settings.interactivity.modes.grab.distance,\n                'mode_bubble_distance': _this.settings.interactivity.modes.bubble.distance,\n                'mode_bubble_size': _this.settings.interactivity.modes.bubble.size,\n                'mode_repulse_distance': _this.settings.interactivity.modes.repulse.distance\n            };\n            _this.retinaInit();\n            _this.canvasSize();\n            _this.canvasPaint();\n            _this.particlesCreate();\n            _this.densityAutoParticles();\n        };\n        this.begin = function () {\n            if (utils_1.isInArray('image', _this.settings.particles.shape.type)) {\n                _this.settings.tmp.img_type = _this.settings.particles.shape.image.src.substring(_this.settings.particles.shape.image.src.length - 3);\n                _this.loadImg(_this.settings.tmp.img_type);\n            }\n            else {\n                _this.checkBeforeDraw();\n            }\n        };\n        return this;\n    }\n    return Particles;\n}());\nexports.Particles = Particles;\n\n\n//# sourceURL=webpack://personal-website/./node_modules/particles.ts/lib/particles.js?");

/***/ }),

/***/ "./node_modules/particles.ts/lib/utils/defaults.js":
/*!*********************************************************!*\
  !*** ./node_modules/particles.ts/lib/utils/defaults.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("exports.__esModule = true;\nexports.defaultConf = {\n    particles: {\n        number: {\n            value: 100,\n            density: {\n                enable: true,\n                value_area: 800\n            }\n        },\n        color: {\n            value: '#ffffff'\n        },\n        shape: {\n            type: 'circle',\n            stroke: {\n                width: 0,\n                color: '#ffffff'\n            },\n            polygon: {\n                nb_sides: 5\n            },\n            character: {\n                value: 'P',\n                font: 'arial',\n                style: 'normal',\n                weight: 'normal'\n            },\n            image: {\n                src: 'particle.png',\n                width: 100,\n                height: 100\n            }\n        },\n        opacity: {\n            value: 1,\n            random: false,\n            anim: {\n                enable: false,\n                speed: 2,\n                opacity_min: 0,\n                sync: false\n            }\n        },\n        size: {\n            value: 10,\n            random: false,\n            anim: {\n                enable: false,\n                speed: 20,\n                size_min: 0,\n                sync: false\n            }\n        },\n        line_linked: {\n            enable: true,\n            distance: 100,\n            color: '#FFFFFF',\n            opacity: 1,\n            width: 1,\n            color_rgb_line: null\n        },\n        move: {\n            enable: true,\n            speed: 6,\n            direction: 'none',\n            random: false,\n            straight: false,\n            out_mode: 'out',\n            bounce: false,\n            parallax: false,\n            attract: {\n                enable: false,\n                rotateX: 3000,\n                rotateY: 3000\n            }\n        },\n        array: [],\n        tmp: {}\n    },\n    interactivity: {\n        detect_on: 'canvas',\n        events: {\n            onhover: {\n                enable: true,\n                mode: 'grab'\n            },\n            onclick: {\n                enable: true,\n                mode: 'push'\n            },\n            resize: true\n        },\n        modes: {\n            grab: {\n                distance: 100,\n                line_linked: {\n                    opacity: 1\n                },\n                outer_shape: {\n                    enable: false,\n                    type: 'inherit',\n                    size: 20,\n                    stroke: {\n                        width: 'inherit',\n                        color: 'inherit'\n                    }\n                }\n            },\n            bubble: {\n                distance: 100,\n                size: 40,\n                duration: 0.4,\n                opacity: 8,\n                speed: 3\n            },\n            repulse: {\n                distance: 200,\n                strength: 100,\n                duration: 0.4\n            },\n            push: {\n                particles_nb: 4\n            },\n            remove: {\n                particles_nb: 2\n            }\n        },\n        el: null,\n        mouse: {},\n        status: null\n    },\n    retina_detect: false,\n    fn: {\n        interact: {},\n        modes: {},\n        vendors: {}\n    },\n    tmp: {}\n};\n\n\n//# sourceURL=webpack://personal-website/./node_modules/particles.ts/lib/utils/defaults.js?");

/***/ }),

/***/ "./node_modules/particles.ts/lib/utils/utils.js":
/*!******************************************************!*\
  !*** ./node_modules/particles.ts/lib/utils/utils.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("exports.__esModule = true;\nfunction randomInt(max) {\n    if (max === void 0) { max = 1; }\n    return Math.floor(Math.random() * max);\n}\nexports.randomInt = randomInt;\nfunction randomFloat(max) {\n    if (max === void 0) { max = 1; }\n    return Math.random() * max;\n}\nexports.randomFloat = randomFloat;\nfunction hexToRgb(hex) {\n    hex = hex.replace(/'^#?([a-f\\d])([a-f\\d])([a-f\\d])$'/gi, function (m) {\n        console.log(m[1] + m[1] + m[2] + m[2] + m[3] + m[3]);\n        return m[1] + m[1] + m[2] + m[2] + m[3] + m[3];\n    });\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result != null\n        ? {\n            'r': parseInt(result[1], 16),\n            'g': parseInt(result[2], 16),\n            'b': parseInt(result[3], 16)\n        }\n        : null;\n}\nexports.hexToRgb = hexToRgb;\nfunction deepExtend(destination, source) {\n    for (var property in source) {\n        if (source[property] && source[property].constructor &&\n            source[property].constructor === Object) {\n            destination[property] = destination[property] || {};\n            arguments.callee(destination[property], source[property]);\n        }\n        else {\n            destination[property] = source[property];\n        }\n    }\n    return destination;\n}\nexports.deepExtend = deepExtend;\n;\nfunction clamp(number, min, max) {\n    return Math.min(Math.max(number, min), max);\n}\nexports.clamp = clamp;\n;\nfunction isInArray(value, array) {\n    return array.indexOf(value) > -1;\n}\nexports.isInArray = isInArray;\n\n\n//# sourceURL=webpack://personal-website/./node_modules/particles.ts/lib/utils/utils.js?");

/***/ }),

/***/ "./src/common.ts":
/*!***********************!*\
  !*** ./src/common.ts ***!
  \***********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.openProject = exports.changeColor = void 0;\nvar particles_json_1 = __importDefault(__webpack_require__(/*! ../assets/particles.json */ \"./assets/particles.json\"));\nvar particles_ts_1 = __webpack_require__(/*! particles.ts */ \"./node_modules/particles.ts/lib/particles.js\");\n/**\n * Particles\n */\nnew particles_ts_1.Particles('particles-js', particles_json_1.default).start();\n/**\n * Theme\n */\nfunction changeColor(obj, color, backgroundColor) {\n    obj.style.backgroundColor = backgroundColor;\n    obj.style.color = color;\n}\nexports.changeColor = changeColor;\n/**\n * Routing\n */\nfunction openProject(projectId) {\n    window.open(\"\".concat(projectId, \".html\"), '_blank');\n}\nexports.openProject = openProject;\n\n\n//# sourceURL=webpack://personal-website/./src/common.ts?");

/***/ }),

/***/ "./src/script.ts":
/*!***********************!*\
  !*** ./src/script.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__webpack_require__(/*! ./common */ \"./src/common.ts\");\nvar common_1 = __webpack_require__(/*! ./common */ \"./src/common.ts\");\n(_a = document.getElementById('change-theme-btn')) === null || _a === void 0 ? void 0 : _a.addEventListener('click', function () {\n    var body = document.body;\n    var bio = document.querySelector('.bio');\n    var projects = document.querySelector('.projects');\n    var projectCards = document.querySelectorAll('.project-card');\n    var socialLinks = document.querySelector('.social-links');\n    if (body.style.backgroundColor === 'black') {\n        (0, common_1.changeColor)(body, 'black', 'white');\n        (0, common_1.changeColor)(bio, 'black', 'white');\n        (0, common_1.changeColor)(projects, 'black', 'white');\n        (0, common_1.changeColor)(socialLinks, 'black', 'white');\n        projectCards.forEach(function (card) {\n            (0, common_1.changeColor)(card, 'black', 'white');\n        });\n    }\n    else {\n        (0, common_1.changeColor)(body, 'white', 'black');\n        (0, common_1.changeColor)(bio, 'white', '#333');\n        (0, common_1.changeColor)(projects, 'white', '#333');\n        (0, common_1.changeColor)(socialLinks, 'white', '#333');\n        projectCards.forEach(function (card) {\n            (0, common_1.changeColor)(card, 'white', '#333');\n        });\n    }\n});\n(_b = document.getElementById('view-comic-btn')) === null || _b === void 0 ? void 0 : _b.addEventListener('click', function () {\n    window.location.href = 'comic.html';\n});\n\n\n//# sourceURL=webpack://personal-website/./src/script.ts?");

/***/ }),

/***/ "./assets/particles.json":
/*!*******************************!*\
  !*** ./assets/particles.json ***!
  \*******************************/
/***/ ((module) => {

"use strict";
eval("module.exports = /*#__PURE__*/JSON.parse('{\"particles\":{\"number\":{\"value\":80,\"density\":{\"enable\":true,\"value_area\":800}},\"color\":{\"value\":\"#ffffff\"},\"shape\":{\"type\":\"circle\",\"stroke\":{\"width\":0,\"color\":\"#000000\"},\"polygon\":{\"nb_sides\":5}},\"opacity\":{\"value\":0.5,\"random\":false,\"anim\":{\"enable\":false,\"speed\":1,\"opacity_min\":0.1,\"sync\":false}},\"size\":{\"value\":3,\"random\":true,\"anim\":{\"enable\":false,\"speed\":40,\"size_min\":0.1,\"sync\":false}},\"line_linked\":{\"enable\":true,\"distance\":150,\"color\":\"#ffffff\",\"opacity\":0.4,\"width\":1},\"move\":{\"enable\":true,\"speed\":6,\"direction\":\"none\",\"random\":false,\"straight\":false,\"out_mode\":\"out\",\"bounce\":false,\"attract\":{\"enable\":false,\"rotateX\":600,\"rotateY\":1200}}},\"interactivity\":{\"detect_on\":\"canvas\",\"events\":{\"onhover\":{\"enable\":true,\"mode\":\"repulse\"},\"onclick\":{\"enable\":true,\"mode\":\"push\"},\"resize\":true},\"modes\":{\"grab\":{\"distance\":400,\"line_linked\":{\"opacity\":1}},\"bubble\":{\"distance\":400,\"size\":40,\"duration\":2,\"opacity\":8,\"speed\":3},\"repulse\":{\"distance\":200,\"duration\":0.4},\"push\":{\"particles_nb\":4},\"remove\":{\"particles_nb\":2}}},\"retina_detect\":true}');\n\n//# sourceURL=webpack://personal-website/./assets/particles.json?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/script.ts");
/******/ 	
/******/ })()
;